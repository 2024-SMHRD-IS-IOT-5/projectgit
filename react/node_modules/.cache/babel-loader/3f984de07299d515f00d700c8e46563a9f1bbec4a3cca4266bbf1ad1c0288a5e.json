{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smhrd\\\\Desktop\\\\projectgit\\\\react\\\\src\\\\components\\\\profile\\\\Profile.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Profile.css\";\nimport Card from \"./Card\";\n\n// 초기 프로필 리스트 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialProfiles = [{\n  id: 1,\n  name: \"프로필 1\",\n  image: \"/img/profile5.png\"\n}];\n\n// 프로필 선택 컴포넌트\nconst ProfileSelector = ({\n  username\n}) => {\n  _s();\n  // props로 username 받음\n  const [profiles, setProfiles] = useState(initialProfiles); // 프로필 목록 상태\n  const [editingProfile, setEditingProfile] = useState(null); // 현재 수정 중인 프로필 ID 상태\n  const [newName, setNewName] = useState(\"\"); // 수정할 이름 상태\n  const [displayName, setDisplayName] = useState(username || \"Guest\"); // 화면에 표시될 이름\n\n  // username이 없을 경우 기본값 설정 (예: 'Guest')\n  useEffect(() => {\n    const storedUsername = localStorage.getItem(\"username\"); // localStorage에서 username 가져오기\n    if (storedUsername) {\n      setDisplayName(storedUsername); // localStorage 값이 있으면 설정\n    } else if (username) {\n      setDisplayName(username); // props로 전달된 username 사용\n    }\n  }, [username]);\n\n  // 새 프로필 추가\n  const handleAddProfile = () => {\n    const newId = profiles.length + 1; // 새로운 ID 생성\n    setProfiles([...profiles, {\n      id: newId,\n      name: `새 프로필 ${newId}`,\n      image: \"/img/profile1.jpg\"\n    }]);\n  };\n\n  // 프로필 수정 모드 활성화\n  const handleEditProfile = profile => {\n    console.log(\"Editing profile:\", profile); // 디버깅 메시지\n    setEditingProfile(profile.id); // 수정 중인 프로필 ID 설정\n    setNewName(profile.name); // 기존 이름을 입력란에 표시\n  };\n\n  // 수정된 프로필 저장\n  const handleSaveEdit = id => {\n    console.log(\"Saving profile with id:\", id); // 디버깅 메시지\n    setProfiles(profiles.map(profile => profile.id === id ? {\n      ...profile,\n      name: newName\n    } : profile));\n    setEditingProfile(null); // 수정 모드 종료\n    setNewName(\"\"); // 입력 필드 초기화\n  };\n\n  // 프로필 삭제\n  const handleDeleteProfile = id => {\n    console.log(\"Deleting profile with id:\", id); // 디버깅 메시지\n    setProfiles(profiles.filter(profile => profile.id !== id)); // 삭제된 프로필 제외\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"profile-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"greeting-heading\",\n        children: [displayName, \"\\uB2D8 \\uC548\\uB155\\uD558\\uC138\\uC694\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"profile-message\",\n        children: \"\\uD504\\uB85C\\uD544\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-list\",\n      children: [profiles.map(profile => /*#__PURE__*/_jsxDEV(Card, {\n        profile: profile,\n        isEditing: editingProfile === profile.id // 현재 수정 중인지 확인\n        ,\n        newName: newName // 수정할 이름 상태\n        ,\n        setNewName: setNewName // 이름 수정 함수 전달\n        ,\n        onEdit: () => handleEditProfile(profile) // 수정 버튼 클릭 시\n        ,\n        onSave: () => handleSaveEdit(profile.id) // 저장 버튼 클릭 시\n        ,\n        onDelete: () => handleDeleteProfile(profile.id) // 삭제 버튼 클릭 시\n      }, profile.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-profile\",\n        onClick: handleAddProfile,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfileSelector, \"Fj6cwagb2Ta47CED7FL9OcMDQzw=\");\n_c = ProfileSelector;\nexport default ProfileSelector;\nvar _c;\n$RefreshReg$(_c, \"ProfileSelector\");","map":{"version":3,"names":["React","useEffect","useState","Card","jsxDEV","_jsxDEV","initialProfiles","id","name","image","ProfileSelector","username","_s","profiles","setProfiles","editingProfile","setEditingProfile","newName","setNewName","displayName","setDisplayName","storedUsername","localStorage","getItem","handleAddProfile","newId","length","handleEditProfile","profile","console","log","handleSaveEdit","map","handleDeleteProfile","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isEditing","onEdit","onSave","onDelete","onClick","_c","$RefreshReg$"],"sources":["C:/Users/smhrd/Desktop/projectgit/react/src/components/profile/Profile.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Profile.css\";\r\nimport Card from \"./Card\";\r\n\r\n// 초기 프로필 리스트 설정\r\nconst initialProfiles = [\r\n  { id: 1, name: \"프로필 1\", image: \"/img/profile5.png\" },\r\n];\r\n\r\n// 프로필 선택 컴포넌트\r\nconst ProfileSelector = ({ username }) => { // props로 username 받음\r\n  const [profiles, setProfiles] = useState(initialProfiles); // 프로필 목록 상태\r\n  const [editingProfile, setEditingProfile] = useState(null); // 현재 수정 중인 프로필 ID 상태\r\n  const [newName, setNewName] = useState(\"\"); // 수정할 이름 상태\r\n  const [displayName, setDisplayName] = useState(username || \"Guest\"); // 화면에 표시될 이름\r\n\r\n  // username이 없을 경우 기본값 설정 (예: 'Guest')\r\n  useEffect(() => {\r\n    const storedUsername = localStorage.getItem(\"username\"); // localStorage에서 username 가져오기\r\n    if (storedUsername) {\r\n      setDisplayName(storedUsername); // localStorage 값이 있으면 설정\r\n    } else if (username) {\r\n      setDisplayName(username); // props로 전달된 username 사용\r\n    }\r\n  }, [username]);\r\n\r\n  // 새 프로필 추가\r\n  const handleAddProfile = () => {\r\n    const newId = profiles.length + 1; // 새로운 ID 생성\r\n    setProfiles([\r\n      ...profiles,\r\n      { id: newId, name: `새 프로필 ${newId}`, image: \"/img/profile1.jpg\" },\r\n    ]);\r\n  };\r\n\r\n  // 프로필 수정 모드 활성화\r\n  const handleEditProfile = (profile) => {\r\n    console.log(\"Editing profile:\", profile); // 디버깅 메시지\r\n    setEditingProfile(profile.id); // 수정 중인 프로필 ID 설정\r\n    setNewName(profile.name); // 기존 이름을 입력란에 표시\r\n  };\r\n\r\n  // 수정된 프로필 저장\r\n  const handleSaveEdit = (id) => {\r\n    console.log(\"Saving profile with id:\", id); // 디버깅 메시지\r\n    setProfiles(\r\n      profiles.map((profile) =>\r\n        profile.id === id ? { ...profile, name: newName } : profile\r\n      )\r\n    );\r\n    setEditingProfile(null); // 수정 모드 종료\r\n    setNewName(\"\"); // 입력 필드 초기화\r\n  };\r\n\r\n  // 프로필 삭제\r\n  const handleDeleteProfile = (id) => {\r\n    console.log(\"Deleting profile with id:\", id); // 디버깅 메시지\r\n    setProfiles(profiles.filter((profile) => profile.id !== id)); // 삭제된 프로필 제외\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-selector\">\r\n      {/* 헤더: 사용자 이름과 안내 메시지 */}\r\n      <header className=\"profile-header\">\r\n        <h2 className=\"greeting-heading\">\r\n          {displayName}님 안녕하세요\r\n        </h2>\r\n        <br/>\r\n        <p className=\"profile-message\">프로필을 선택해주세요</p>\r\n      </header>\r\n\r\n      {/* 프로필 목록 */}\r\n      <div className=\"profile-list\">\r\n        {profiles.map((profile) => (\r\n          <Card\r\n            key={profile.id}\r\n            profile={profile}\r\n            isEditing={editingProfile === profile.id} // 현재 수정 중인지 확인\r\n            newName={newName} // 수정할 이름 상태\r\n            setNewName={setNewName} // 이름 수정 함수 전달\r\n            onEdit={() => handleEditProfile(profile)} // 수정 버튼 클릭 시\r\n            onSave={() => handleSaveEdit(profile.id)} // 저장 버튼 클릭 시\r\n            onDelete={() => handleDeleteProfile(profile.id)} // 삭제 버튼 클릭 시\r\n          />\r\n        ))}\r\n        {/* 새 프로필 추가 버튼 */}\r\n        <div\r\n          className=\"add-profile\"\r\n          onClick={handleAddProfile}\r\n        >\r\n          +\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileSelector;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}